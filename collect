file controller.py:

from model import Model
from view.view import View
from controller.maincontroller import Maincontroller
from controller.watchlistcontroller import Watchlistcontroller

class Controller:
    def __init__(self, model: Model, view: View) -> None:
        self.model = model
        self.view = view
        self.maincontroller = Maincontroller(model=model, view=view)
        self.watchlistcontroller = Watchlistcontroller(model=model, view=view)

    def run(self) -> None:
        self.view.root.mainloop()

file maincontroller.py:

from model import Model
from view.view import View

class Maincontroller:
    def __init__(self, model: Model, view: View):
        self.view = view
        self.model = model
        self.frame = self.view.mainview
        self.bind_view_controller()

    def bind_view_controller(self):
        self.view.mainview.button_configWatchlist.configure(command=self.handle_button_configWatchlist)

    def handle_button_configWatchlist(self):
        self.view.setWatchlistview()

file watchlistcontroller.py:
from model import Model
from view.view import View

class Watchlistcontroller:
    def __init__(self, model: Model, view: View):
        self.view = view
        self.model = model
        self.frame = self.view.watchlistview
        self.bind_view_controller()

    def bind_view_controller(self):
        self.view.watchlistview.button_return.configure(command=self.handle_buttonReturn)

    def handle_buttonReturn(self):
        self.view.setMainview()

file mainview.py:
import tkinter as tk
from tkcalendar import DateEntry

class Mainview(tk.Frame):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        #self.grid_columnconfigure(0, weight=1)
        #self.grid_rowconfigure(0, weight=1)

        #self.start_date_var = tk.StringVar(self)
        #self.end_date_var = tk.StringVar(self)

        #start_label = tk.Label(self, text="Start Date:")
        #start_label.grid(row=0, column=0, padx=5, pady=5)
        #self.start_date_entry = DateEntry(self, textvariable=self.start_date_var, width=12, background='darkblue',
        #                                  foreground='white', borderwidth=2, date_pattern='y-mm-dd')
        #self.start_date_entry.grid(row=0, column=1, padx=5, pady=5)

        #end_label = tk.Label(self, text="End Date:")
        #end_label.grid(row=1, column=0, padx=5, pady=5)
        #self.end_date_entry = DateEntry(self, textvariable=self.end_date_var, width=12, background='darkblue',
        #                                foreground='white', borderwidth=2, date_pattern='y-mm-dd')
        #self.end_date_entry.grid(row=1, column=1, padx=5, pady=5)

        #self.button_generateData = tk.Button(self, text="Generate Data", command=self.generate_data)
        #self.button_generateData.grid(row=0, column=3, padx=5, pady=5, sticky="ne")

        self.button_configWatchlist = tk.Button(self, text="Configure watchlist")
        self.button_configWatchlist.grid(row=1, column=3, padx=5, pady=5, sticky="ne")

        #self.button_configAnalysis = tk.Button(self, text="Configure analysis", command=self.config_analysis)
        #self.button_configAnalysis.grid(row=2, column=3, padx=5, pady=5, sticky="ne")

    def create_mainview(self):
        pass

    def generate_data():
        pass

    def config_watchlist():
        pass

    def config_analysis():
        pass

file root.py:
from tkinter import Tk

class Root(Tk):
    def __init__(self):
        super().__init__()
        self.title("Application")

        width = 500
        width_min = 400
        height = 400
        height_min = 300

        self.geometry(f"{width}x{height}")
        #self.minsize(width=width_min, height=height_min)
        self.grid_columnconfigure(0, weight=1)
        self.grid_rowconfigure(0, weight=1)


file view.py:
from model import Model
from view.root import Root
from view.mainview import Mainview
from view.watchlistview import Watchlistview

class View:
    def __init__(self, model: Model) -> None:
        self.root = Root()
        self.mainview = Mainview(self.root)
        self.watchlistview = Watchlistview(self.root)
        self.currentview = self.mainview
        self.setMainview()

    def setMainview(self):
        if self.currentview is not None:
            self.currentview.pack_forget()
        self.currentview = self.mainview
        #self.frames[self.currentviewname].grid(row=0, column=0)
        self.currentview.pack()

    def setWatchlistview(self):
        if self.currentview is not None:
            self.currentview.pack_forget()
        self.currentview = self.watchlistview
        #self.frames[self.currentviewname].grid(row=0, column=0)
        self.currentview.pack()

    def currentview(self):
        pass

    def create_mainview(self):
        pass

    def generate_data():
        pass

    def config_watchlist():
        pass

    def config_analysis():
        pass


file watchlistview.py:
import tkinter as tk
from tkcalendar import DateEntry

class Watchlistview(tk.Frame):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        self.button_return = tk.Button(self, text="X")
        self.button_return.pack(side='right',  fill='both',  padx=25,  pady=25,  expand=True)

        self.list = tk.Listbox(self)
        self.list.pack(side='left',  fill='both',  padx=15,  pady=15,  expand=True)


    def add_ma_entry():
        pass

    def remove_ma_entry():
        pass

file main.py:
from controller.controller import Controller
from model import Model
from view.view import View

def main() -> None:
    model = Model()
    view = View(model)
    controller = Controller(model,view)
    controller.run()

if __name__ == "__main__":
    main()

file model.py:
class Model:
    def __init__(self):
        self.watchlist = []
        self.selection = []     # selected stocks from list
        self.date_start = None
        self.date_end = None
        self.watchlist_input = None # to add to watchlist
        self.configfile = None  # configfile containing watchlist

